version: '3.8'

services:
  # Nginx - Proxy reverso
  nginx:
    image: nginx:alpine
    container_name: ecommerce_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl  # Para certificados SSL si los tienes
    depends_on:
      - frontend
      - backend
      - dashboard
      - rag
    restart: unless-stopped
    networks:
      - ecommerce_network

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ecommerce_frontend
    expose:
      - "80"
    restart: unless-stopped
    networks:
      - ecommerce_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ecommerce_backend
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - ecommerce_network

  # Dashboard Next.js
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: ecommerce_dashboard
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    restart: unless-stopped
    networks:
      - ecommerce_network

  # RAG Service Python/Flask
  rag:
    build:
      context: ./rag
      dockerfile: Dockerfile
    container_name: ecommerce_rag
    expose:
      - "5000"
    environment:
      - FLASK_ENV=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - VECTOR_STORE_PATH=/app/vector_store
    volumes:
      - rag_data:/app/vector_store
    restart: unless-stopped
    networks:
      - ecommerce_network

  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce_postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - ecommerce_network

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: ecommerce_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - ecommerce_network

volumes:
  postgres_data:
  redis_data:
  rag_data:

networks:
  ecommerce_network:
    driver: bridge
