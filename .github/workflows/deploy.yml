name: Deploy to VPS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
          dashboard/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci

    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci

    - name: Install Dashboard Dependencies
      run: |
        cd dashboard
        npm ci

    - name: Install RAG Dependencies
      run: |
        cd rag
        pip install -r requirements.txt

    - name: Run Backend Tests
      run: |
        cd backend
        npm test || echo "No tests found"

    - name: Run Frontend Tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false || echo "No tests found"

    - name: Run Dashboard Tests
      run: |
        cd dashboard
        npm run lint

    - name: Run RAG Tests
      run: |
        cd rag
        python -m pytest tests/ || echo "No tests found"

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker images
      run: |
        # Build and push backend
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest ./backend
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
        
        # Build and push frontend
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest ./frontend
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
        
        # Build and push dashboard
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dashboard:latest ./dashboard
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dashboard:latest
        
        # Build and push RAG
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/rag:latest ./rag
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/rag:latest

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          # Navigate to project directory
          cd /opt/ecommerce
          
          # Pull latest code
          git pull origin main
          
          # Log in to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Pull latest images
          docker-compose pull
          
          # Stop running containers
          docker-compose down
          
          # Start containers with new images
          docker-compose up -d
          
          # Clean up unused images
          docker system prune -f
          
          # Check if services are running
          sleep 30
          docker-compose ps
          
          # Test health endpoints
          curl -f http://localhost/health || exit 1

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'
